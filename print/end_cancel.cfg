################################
########## END_PRINT ###########
################################
[gcode_macro END_PRINT]
description: Present the finished print
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% if printcfg.end_print == True %}
        {% if printcfg.led_status == True %}
            STATUS_PART_READY ; LED feedback
        {% endif %}
        STOP_COMPONENTS
        # Acknowledge success!
        M{printcfg.output} Print Complete ; status feedback
        {% if printcfg.audio_status == True %}
            {printcfg.success_audio} ; audio feedback
        {% endif %}
        {% if printcfg.led_status == True %}
            {printcfg.status_ready} ; LED feedback
        {% endif %}
        {% if printcfg.unload_filament == True %}
            {printcfg.m600} ; unload filament
        {% endif %}
        {% if printcfg.power_off == True %}
            {printcfg.off_macro} ; power off printer
        {% endif %}
    {% endif %}

################################
###### STOP_COMPONENTS #########
################################
[gcode_macro STOP_COMPONENTS]
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% if printcfg.auto_filsensor == True %}
        # Disable filament sensor
        DISABLEFILAMENTSENSOR
    {% endif %}
    {% if printcfg.controller_fan == True %}
        {printcfg.controller_fan_stop}
    {% endif %}
    {% if printcfg.use_scrubber == True %}
        # Scrub VOCs
        SCRUBBER
    {% endif %}

################################
######## CANCEL_PRINT ##########
################################
[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    M{printcfg.output} Print Canceled ; status feedback
    {% if printcfg.led_status == True %}
        STATUS_ERROR ; LED feedback
    {% endif %}
    ## Move head and retract only if not already in the pause state and park set to true
    {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
        {% if printer.toolhead.homed_axes == "xyz" %}
            _TOOLHEAD_PARK_PAUSE_CANCEL
        {% endif %}
    {% endif %}
    {% if printcfg.audio_status == True %}
        {printcfg.error_audio} ; audio feedback
    {% endif %}
    STOP_COMPONENTS
    TURN_OFF_HEATERS
    CANCEL_PRINT_BASE
