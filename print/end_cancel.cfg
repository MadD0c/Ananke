################################
########## END_PRINT ###########
################################
[gcode_macro END_PRINT]
description: Present the finished print
gcode:
    {% set defaultcfg = printer['gcode_macro _defaultcfg'] %} ; get defaultcfg variables
    {% set notifycfg = printer["gcode_macro _notifycfg"] %} ; get notifycfg variables
    {% if defaultcfg.end_print == True %}
        {% if notifycfg.led_status == True %}
          {notifycfg.status_part_ready} ; LED feedback
        {% endif %}
        STOP_COMPONENTS
        # Acknowledge success!
        M{notifycfg.output} Print Complete ; status feedback
        {% if notifycfg.audio_status == True %}
            {notifycfg.success_audio} ; audio feedback
        {% endif %}
        {% if notifycfg.led_status == True %}
            {notifycfg.led_status_ready} ; LED feedback
        {% endif %}
        {% if defaultcfg.unload_filament == True %}
            M600 ; unload filament
        {% endif %}
        {% if defaultcfg.power_off == True %}
            {defaultcfg.off_macro} ; power off printer
        {% endif %}
    {% endif %}

################################
###### STOP_COMPONENTS #########
################################
[gcode_macro STOP_COMPONENTS]
gcode:
    {% set defaultcfg = printer['gcode_macro _defaultcfg'] %} ; get defaultcfg variables
    {% if defaultcfg.auto_filsensor == True %}
        # Disable filament sensor
        DISABLEFILAMENTSENSOR
    {% endif %}
    {% if defaultcfg.controller_fan == True %}
        {defaultcfg.controller_fan_stop}
    {% endif %}
    {% if defaultcfg.use_scrubber == True %}
        # Scrub VOCs
        SCRUBBER
    {% endif %}

################################
######## CANCEL_PRINT ##########
################################
[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode:
    {% set defaultcfg = printer['gcode_macro _defaultcfg'] %} ; get defaultcfg variables
    {% set notifycfg = printer["gcode_macro _notifycfg"] %} ; get notifycfg variables
    M{notifycfg.output} Print Canceled ; status feedback
    {% if notifycfg.led_status == True %}
       {notifycfg.led_status_error} ; LED feedback
    {% endif %}
    ## Move head and retract only if not already in the pause state and park set to true
    {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
        {% if printer.toolhead.homed_axes == "xyz" %}
            _TOOLHEAD_PARK_PAUSE_CANCEL
        {% endif %}
    {% endif %}
    {% if notifycfg.audio_status == True %}
        {notifycfg.error_audio} ; audio feedback
    {% endif %}
    STOP_COMPONENTS
    TURN_OFF_HEATERS
    CANCEL_PRINT_BASE
