#####################################
#            Print Macros           #
#      Version 2.2.0 2023-1-27      #
#####################################

################################
######### START_PRINT ##########
################################
[gcode_macro START_PRINT]
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% set print_cfg.starting_print = True %} ; begin print_start process
    # Define positioning system
    G90 ; use absolute coordinates
    M83 ; extruder relative mode
    # Preheat bed surface
    HEAT_SURFACE
    # Preheat/soak chamber
    PREP_CHAMBER
    # Prepare fans
    PREP_FANS
    # Prepare bed suface
    PREP_SURFACE
    {% if printcfg.heat_soak_complete == False %}
        # Pause without parking
        PAUSE_BASE
    {% else %}
        # Wait for chamber preheat to finalize
        FINALIZE_ENVIRO
    {% endif %}

################################
######### HEAT_SURFACE #########
################################
[gcode_macro HEAT_SURFACE]
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    # Preheat bed
    {% if printcfg.bed_temp > 0 %}
        {% if printcfg.led_status == True %}
            {printcfg.status_heat} ; LED feedback
        {% endif %}
        {% if printcfg.extruder_pretemp > 0 %}
            M{printcfg.output} Warming extruder ; status feedback
            SET_HEATER_TEMPERATURE HEATER=extruder TARGET={printcfg.extruder_pretemp} ; allow partial nozzle warmup
        {% endif %}
        M{printcfg.output} Preheating bed ; status feedback
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={printcfg.bed_temp}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={printcfg.bed_temp-1} MAXIMUM={printcfg.bed_temp+5}
    {% endif %}

################################
######### PREP_CHAMBER #########
################################
[gcode_macro PREP_CHAMBER]
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% if printcfg.chamber_temp != 0 %}
        M{printcfg.output} Preheating chamber ; status feedback
        {% if printcfg.led_status == True %}
            {printcfg.status_heat} ; LED feedback
        {% endif %}
        {% if printcfg.chamber_type == 'temperature_fan' %}
            SET_TEMPERATURE_FAN_TARGET temperature_fan={printcfg.chamber_name} target={printcfg.chamber_temp}
        {% elif printcfg.chamber_type == 'heater_generic' %}
            SET_HEATER_TEMPERATURE HEATER={printcfg.chamber_name} TARGET={printcfg.chamber_temp}
        {% endif %}
        {% if printcfg.heat_soak == True %}
            SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=heat_soak_complete VALUE=False
            HEAT_SOAK
        {% endif %}
    {% endif %}

################################
########## PREP_FANS ###########
################################
[gcode_macro PREP_FANS]
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    # Set controller fan
    {% if printcfg.controller_fan == True %}
        {printcfg.controller_fan_start}
    {% endif %}
    # Set part-cooling fan (off)
    M107
    # Set nevermore/filter fan
    {% if printcfg.nevermore_speed > 0 %}
        SET_FAN_SPEED FAN={printcfg.nevermore_name} SPEED={printcfg.nevermore_speed}
    {% endif %}

################################
######### PREP_SURFACE #########
################################
[gcode_macro PREP_SURFACE]
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% set config = printer.configfile.settings %} ; get realtime configfile settings
    # Homing/undock probe
    {% if printcfg.docking_probe == True %}
        # Collect probe
        M{printcfg.output} Collecting probe ; status feedback
        {% if printcfg.led_status == True %}
            STATUS_HOMING ; LED feedback
        {% endif %}
        {% if printer.toolhead.homed_axes != "xyz" %}
            M{printcfg.output} Homing XY ; status feedback
            G28 Y X ; home XY axis
        {% endif %}
        {printcfg.attach_macro} ; attach probe
        M{printcfg.output} Homing Z ; status feedback
        G28 Z ; home Z axis
    {% else %}
        G28 ; home XYZ axis
    {% endif %}
    # Z-tilt or QGL
    {% if printcfg.z_tilt == True %}
        {% if config.z_tilt is defined %}
            M{printcfg.output} Calibrate Z ; status feedback
            {% if printcfg.led_status == True %}
                STATUS_CALIBRATING_Z ; LED feedback
            {% endif %}
            Z_TILT_ADJUST ; adjust z-tilt
        {% else %}
            M{printcfg.error_output} Z_tilt not configured!
        {% endif %}
    {% elif printcfg.qgl == True %}
        {% if config.quad_gantry_level is defined %}
            M{printcfg.output} Calibrate Z ; status feedback
            {% if printcfg.led_status == True %}
                STATUS_CALIBRATING_Z ; LED feedback
            {% endif %}
            QUAD_GANTRY_LEVEL  ; adjust QGL
        {% else %}
            M{printcfg.error_output} QGL not configured!
        {% endif %}
    {% endif %}
    # Bed mesh
    {% if printcfg.bed_mesh == True %}
        {% if config.bed_mesh is defined %}
            {% if printcfg.load_mesh == True %}
                M{printcfg.output} Mesh print area ; status feedback
                BED_MESH_PROFILE LOAD={printcfg.mesh_profile} ; load mesh profile
            {% else %}
                M{printcfg.output} Mesh print area ; status feedback
                BED_MESH_CALIBRATE ; generate new mesh
            {% endif %}
        {% else %}
            M{printcfg.error_output} Bed_mesh not configured!
        {% endif %}
    {% endif %}
    # Dock probe
    {% if printcfg.docking_probe == True %}
        M{printcfg.output} Docking probe ; status feedback
        {printcfg.dock_macro} ; dock probe
    {% endif %}

################################
####### FINALIZE_ENVIRO ########
################################
[gcode_macro FINALIZE_ENVIRO]
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    # Preheat hotend
    PREP_EXTRUDER
    # Status notifications
    {% if printcfg.audio_status == True %}
        {printcfg.start_audio} ; audio feedback
    {% endif %}
    {% set print_cfg.starting_print = False %} ; complete print_start process
    M{printcfg.output} Print Started ; status feedback
    {% if printcfg.led_status == True %}
        STATUS_PRINTING ; LED feedback
    {% endif %}

################################
######## PREP_EXTRUDER #########
################################
[gcode_macro PREP_EXTRUDER]
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% if printcfg.auto_filsensor == True %}
        # Turn on Filament Sensor
        ENABLEFILAMENTSENSOR
    {% endif %}
    # Begin heating extruder hotend
    M{printcfg.output} Preheating tool ; status feedback
    {% if printcfg.led_status == True %}
        {printcfg.status_heat} ; LED feedback
    {% endif %}
    M104 S{printcfg.extruder_temp} ; set final nozzle temp
    # Park for preheating
    {% if printcfg.cleaning == True %}
        G1 Z{25 + print_cfg.clean_z} F240
        G1 X{print_cfg.clean_x} Y{print_cfg.clean_y} F3000 ; move to park position
    {% else %}
        G1 Z{printcfg.preheat_z} F240
        G1 X{printcfg.preheat_x} Y{printcfg.preheat_y} F3000 ; move to park position
    {% endif %}
    # Wait for heating to complete
    M109 S{printcfg.extruder_temp} ; wait for nozzle temp to stabilize
    # Nozzle Cleaning
    {% if printcfg.cleaning == True %}
        {% if printcfg.led_status == True %}
            STATUS_CLEANING ; LED feedback
        {% endif %}
        {% if printcfg.audio_status == True %}
            {printcfg.clean_macro} ; audio feedback
        {% endif %}
    {% endif %}
    # Nozzle Purging
    {% if printcfg.purging == True %}
        {% if printcfg.led_status == True %}
            STATUS_CLEANING ; LED feedback
        {% endif %}
        {% if printcfg.audio_status == True %}
            {printcfg.purge_macro} ; purge nozzle
        {% endif %}
    {% endif %}
    # Extruder configuration
    G21 ; set units to millimeters
    G90 ; use absolute coordinates
    M82 ; use absolute distances for extrusion
    G92 E0 ; reset extrusion distance