# use NEOPIXEL_DISPLAY LED="Led_Name" TYPE=template_type MODE=template_mode

# for TYPE use:
# extruder_temp     :extruder temperature progress
# bed_temp          :bed temperature progress
# print_percent     :print progress
# printer_speed     :printer speed
# clear             :will clear any previous template assigned to the LED

# for MODE use:
# progress          :the leds will light up one by one
# glow              :all leds will fade from one color (or non) to other color

# more info: https://github.com/digitalninja-ro/klipper-neopixel/blob/master/README.md

[gcode_macro NEOPIXEL_DISPLAY]
gcode:
    {% set led = params.LED %}
    {% set type = params.TYPE %}
    {% set mode = params.MODE %}
    {% set index = params.INDEX|default(0) %}
    {% set my_neopixel = printer.configfile.settings['neopixel ' ~ led|lower] %}

    {% if type == 'clear' %}
        SET_LED_TEMPLATE LED={led} TEMPLATE=""
        SET_LED LED={led} RED=0 GREEN=0 BLUE=0 
    {% else %}
        {% if mode == 'progress' %}
            {% for i in range(my_neopixel.chain_count) %}
                SET_LED_TEMPLATE LED={led} INDEX={i+1} TEMPLATE={'led_' ~ type ~ '_' ~ mode} param_led_num={i+1} param_led_total={my_neopixel.chain_count}
            {% endfor %}
        {% endif %}
        {% if mode == 'glow' %}
            {% if index == 0 %}
                SET_LED_TEMPLATE LED={led} TEMPLATE={'led_' ~ type ~ '_' ~ mode}
            {% else %}
                SET_LED_TEMPLATE LED={led} INDEX={index} TEMPLATE={'led_' ~ type ~ '_' ~ mode}
            {% endif %}
        {% else %}
            SET_LED_TEMPLATE LED={led} TEMPLATE={'led_' ~ type}
        {% endif %}
    {% endif %}

[gcode_macro _sb_vars]
# User settings for the StealthBurner status leds. You can change the status colors and led
# configurations for the logo and nozzle here.
variable_colors: { # Colors for logo states
            'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},
            'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},
            'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},
            'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},
            'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},
            'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},
            'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},
            'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},
            'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},
            'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}
            }
variable_defined_led: {
    'logo': {'led':'Stealthburner','index':'"1"'},
    'nozzle': {'led':'Stealthburner','index':'"2,3"'}
    }
#variable_logo_led_name:         "Stealthburner"    # The name of the addressable LED chain that contains the logo LED(s)
#variable_logo_idx:              "1"          # A comma-separated list of indexes LEDs in the logo
#variable_nozzle_led_name:       "Stealthburner"    # The name of the addressable LED chain that contains the nozzle LED(s). This will typically be the same LED chain as the logo.
#variable_nozzle_idx:            "2,3"        # A comma-separated list of indexes of LEDs in the nozzle
gcode:

[gcode_macro LED_SET]
gcode:
    {% set type = params.TEMPLATE %}
    {% if type is defined %}
        {% set led = params.LED %}
        {% set type = params.TYPE %}
        {% set mode = params.MODE %}
        {% set index = params.INDEX|default(0) %}
        {% set my_neopixel = printer.configfile.settings['neopixel ' ~ led|lower] %}
    
        {% if type == 'clear' %}
            SET_LED_TEMPLATE LED={led} TEMPLATE=""
            SET_LED LED={led} RED=0 GREEN=0 BLUE=0 
        {% else %}
            {% if mode == 'progress' %}
                {% for i in range(my_neopixel.chain_count) %}
                    SET_LED_TEMPLATE LED={led} INDEX={i+1} TEMPLATE={'led_' ~ type ~ '_' ~ mode} param_led_num={i+1} param_led_total={my_neopixel.chain_count}
                {% endfor %}
            {% endif %}
            {% if mode == 'glow' %}
                {% if index == 0 %}
                    SET_LED_TEMPLATE LED={led} TEMPLATE={'led_' ~ type ~ '_' ~ mode}
                {% else %}
                    SET_LED_TEMPLATE LED={led} INDEX={index} TEMPLATE={'led_' ~ type ~ '_' ~ mode}
                {% endif %}
            {% else %}
                SET_LED_TEMPLATE LED={led} TEMPLATE={'led_' ~ type}
            {% endif %}
        {% endif %}
    {% else %}
        {% set leds_name = params.LED %}
        {% set color_name = params.COLOR %}
        {% set red = params.RED|float %}
        {% set green = params.GREEN|float %}
        {% set blue = params.BLUE|float %}
        {% set white = params.WHITE|float %}
        {% set index = params.INDEX|float %}
        {% set transmit_last = params.TRANSMIT|default(1) %}
        {% if color_name is defined %}
            {% set color = printer["gcode_macro _sb_vars"].colors[color_name] %}
            {% set r = color.r %}
            {% set g = color.g %}
            {% set b = color.b %}
            {% set w = color.w %}
        {% elif red is defined and green is defined and blue is defined and white is defined %}
            {% set r = red %}
            {% set g = green %}
            {% set b =  blue %}
            {% set w =  white %}
        {% else %}
            { action_raise_error("Please provide color name or RGBW values") }
        {% endif %}
        {% if led_name is defined %}
            {% set custom_led = printer["gcode_macro _sb_vars"].defined_led %}
            {% set led_printer = "['neopixel led_name']" %}
            {% if led_printer in custom_led %}
                {% set led = custom_led[led_name][led]|string %}
                {% set idx = (custom_led[led_name][index]|string).split(',') %}
            {% elif led_printer in printer.configfile.config %}
                {% set led = led_name %}
                {% if index is defined %}
                    {% set idx = index %}
                {% endif %}
            {% else %}
                { action_raise_error("LED name not valid!!") }
            {% endif %}
        {% else %}
            { action_raise_error("Please provide LED name") }
        {% endif %}
        {% if index is defined %}
          {% set idx = (index|string).split(',') %}
        {% endif %}
        {% if idx is defined %}
            LED_RESET LED={led}
            {% for led_index in idx %}
                {% set transmit=transmit_last if loop.last else 0 %}
                set_led led={led} red={r} green={g} blue={b} white={w} index={idx} transmit={transmit}
            {% endfor %}
        {% else %}
            LED_RESET LED={led}
            {% set transmit=transmit_last %}
            set_led led={led} red={r} green={g} blue={b} white={w} transmit={transmit}
        {% endif %}
    {% endif %}

[gcode_macro LED_RESET]
gcode:
    {% set led = params.LED %}
    SET_LED_TEMPLATE LED={led} TEMPLATE=""
    SET_LED LED={led} RED=0 GREEN=0 BLUE=0 
