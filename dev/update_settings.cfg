[gcode_macro _cfgupdate]
gcode:
  {% set usercfg = printer["gcode_macro _usercfg"] %}
  {% set defaultcfg = printer["gcode_macro _defaultcfg"] %}
  {% set output = [] %}
  # Force overrides to use the original types in _KM_GLOBALS.
  {% for k in usercfg %}
    {% if k not in defaultcfg %}
        {% set dummy = output.append("%s is not valid for usercfg." |
                         format(k)) %}
      {% endif %}
    {% elif defaultcfg[k] is string %}
      SET_GCODE_VARIABLE MACRO=defaultcfg VARIABLE={k
        } VALUE="'{usercfg[k]|replace('\\','\\\\')|replace('\'','\\\'')
                             |replace('\"','\\\"')}'"
    {% elif defaultcfg[k] is float %}
      SET_GCODE_VARIABLE MACRO=defaultcfg VARIABLE={k
        } VALUE="{usercfgcfg[k]|float}"
    {% elif defaultcfg[k] is integer or defaultcfg[k] is boolean %}
      SET_GCODE_VARIABLE MACRO=defaultcfg VARIABLE={k} VALUE="{usercfg[k]|int}"
    {% elif defaultcfg[k] is mapping %}
      {% if usercfg[k] is not mapping %}
        {% set dummy = output.append("%s requires a mapping type." |
                         format(k)) %}
      {% endif %}
      SET_GCODE_VARIABLE MACRO=defaultcfg VARIABLE={k
        } VALUE="{optionscfg[k]|replace('\"','\\\"')}"
    {% elif defaultcfg[k] is sequence %}
      {% if optionscfg[k] is not sequence %}
        {% set dummy = output.append("%s requires a sequence type." |
                         format(k)) %}
      {% endif %}
      SET_GCODE_VARIABLE MACRO=defaultcfg VARIABLE={k
        } VALUE="{optionscfg[k]|replace('\"','\\\"')}"
    {% else %}
      {% set dummy = output.append("%s is not a valid type for settings." |
                        format(k)) %}
    {% endif %}
  {% endfor %}
