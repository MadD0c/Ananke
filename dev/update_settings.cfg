[gcode_macro _cfgupdate]
gcode:
  {% set usercfg = printer["gcode_macro _usercfg"] %}
  {% set defaultcfg = printer["gcode_macro _defaultcfg"] %}
  {% set output = [] %}
  {% for k in usercfg %}
    #{% if k not in defaultcfg %}
    #    {% set dummy = output.append("%s is not valid for User Config." |format(k)) %}
    {% if defaultcfg[k] is string %}
      SET_GCODE_VARIABLE MACRO=_defaultcfg VARIABLE={k} VALUE="'{usercfg[k]|replace('\\','\\\\')|replace('\'','\\\'')|replace('\"','\\\"')}'"
#            M118 "User String added"
    {% elif defaultcfg[k] is float %}
      SET_GCODE_VARIABLE MACRO=_defaultcfg VARIABLE={k} VALUE="{usercfg[k]|float}"
#      M118 "User Float added"
    {% elif defaultcfg[k] is integer %}
      SET_GCODE_VARIABLE MACRO=_defaultcfg VARIABLE={k} VALUE="{usercfg[k]|int}"
#      M118 "User integer added"
    {% elif defaultcfg[k] is boolean %}
      SET_GCODE_VARIABLE MACRO=_defaultcfg VARIABLE={k} VALUE="{usercfg[k]|bool}"
#      M118 "User integer added"
    {% elif defaultcfg[k] is mapping %}
      #{% if usercfg[k] is not mapping %}
      #  {% set dummy = output.append("%s requires a mapping type." | format(k)) %}
      #{% endif %}
      SET_GCODE_VARIABLE MACRO=_defaultcfg VARIABLE={k} VALUE="{usercfg[k]|replace('\"','\\\"')}"
#      M118 "User Mapping added"
    {% elif defaultcfg[k] is sequence %}
      #{% if usercfg[k] is not sequence %}
      #  {% set dummy = output.append("%s requires a sequence type." | format(k)) %}
      #{% endif %}
      SET_GCODE_VARIABLE MACRO=_defaultcfg VARIABLE={k} VALUE="{usercfg[k]|replace('\"','\\\"')}"
#      M118 "User Sequence added"
    {% else %}
      {% set dummy = output.append("%s is not a valid type for User Config." | format(k)) %}
    {% endif %}
  {% endfor %}
