
################################
########### PARKING ############
################################
# Used to park the toolhead for filament changes
[gcode_macro PARK_TOOLHEAD]
gcode:
    {% set defaultcfg = printer['gcode_macro _defaultcfg'] %} ; get defaultcfg variables
    {% set cachevar = printer['gcode_macro _cachevar'] %} ; get defaultcfg variables
    {% set config = printer.configfile.settings %} ; get realtime configfile settings
    STATUS_PARK
    {% set mode = params.MODE | default(END) | string %}
    _TOOLHEAD_PARK_{mode}
    
[gcode_macro _FILAMENT_PARK]
gcode:
    {% set defaultcfg = printer['gcode_macro _defaultcfg'] %} ; get defaultcfg variables
    {% set cachevar = printer['gcode_macro _cachevar'] %} ; get defaultcfg variables
    {% set config = printer.configfile.settings %} ; get realtime configfile settings
	SET_GCODE_VARIABLE MACRO=_cachevar VARIABLE=prev_temp VALUE={printer.extruder.target}
    G91
	{% if printer.toolhead.position.z|float + defaultcfg.park_z_min|float < config["stepper_z"]["position_max"]|float %}
		{% if  printer.toolhead.position.z < defaultcfg.park_z_min|int %}
            G1 Z{defaultcfg.park_z_min|int-printer.toolhead.position.z|int}
		{% else %}
            SAVE_GCODE_STATE NAME=save_state
            G1 Z{defaultcfg.park_z_min|int} 
            RESTORE_GCODE_STATE NAME=save_state
        {% endif %}
	{% endif%}
	G90
	G1 X{defaultcfg.park_x|int} Y{defaultcfg.park_y|int} F{defaultcfg.park_speed|int}

[gcode_macro _TOOLHEAD_PARK_END]
gcode:
  _TOOLHEAD_PARK_END_CANCEL

[gcode_macro _TOOLHEAD_PARK_CANCEL]
gcode:
  _TOOLHEAD_PARK_END_CANCEL

[gcode_macro _TOOLHEAD_PARK_END_CANCEL]
description: Helper: park toolhead used in END and CANCEL_PRINT
variable_extrude: 1.0
gcode:
    {% set defaultcfg = printer['gcode_macro _defaultcfg'] %} ; get defaultcfg variables
    {% set config = printer.configfile.settings %} ; get realtime configfile settings
    ##### set park positon for x and y #####
    # default is your max posion from your printer.cfg
    {% set x_park = defaultcfg.park_x|int %}
    {% set y_park = defaultcfg.park_y|int %}
    {% set z_park_delta = defaultcfg.park_z_delta|int %}
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float - 10.0 %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - z_park_delta) %}
        {% set z_safe = z_park_delta %}
    {% else %}
        {% set z_safe = max_z %}
    {% endif %}
    ##### end of definitions #####
    {% if printer.extruder.can_extrude|lower == 'true' %}
        M83
        G1 E-{defaultcfg.park_extrude} F2100
        {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
    {% else %}
        M{defaultcfg.notify_output|int} Extruder not hot enough
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}
        G90
        {% if act_z|float + z_safe|float < max_z|float %}
            {% if act_z < defaultcfg.park_z_min|int %}
                G1 Z{defaultcfg.park_z_min|int}
            {% else %}
                SAVE_GCODE_STATE NAME=save_state
                G1 Z{z_safe|int + act_z|int}
                RESTORE_GCODE_STATE NAME=save_state
            {% endif %}
        {% else %}
        G1 Z{z_safe|int}
        {% endif%}
        G90
        G1 X{defaultcfg.park_x|int} Y{defaultcfg.park_y|int} F{defaultcfg.park_speed|int}
        {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
    {% else %}
        M{defaultcfg.notify_output|int} Printer not homed
    {% endif %}
    M84

[gcode_macro _TOOLHEAD_PARK_PAUSE]
description: Helper: park toolhead used in PAUSE
variable_extrude: 1.0
gcode:
    {% set defaultcfg = printer['gcode_macro _defaultcfg'] %} ; get defaultcfg variables
    {% set config = printer.configfile.settings %} ; get realtime configfile settings
    ##### set park positon for x and y #####
    # default is your max posion from your printer.cfg
    {% set x_park = defaultcfg.park_x|int %}
    {% set y_park = defaultcfg.park_y|int %}
    {% set z_park_delta = defaultcfg.park_z_delta|int %}
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float - 10.0 %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - z_park_delta) %}
        {% set z_safe = z_park_delta %}
    {% else %}
        {% set z_safe = max_z %}
    {% endif %}
    ##### end of definitions #####
    {% if printer.extruder.can_extrude|lower == 'true' %}
        M83
        G1 E-{defaultcfg.park_extrude} F2100
        {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
    {% else %}
        STATUS_TOOLHEAD_TEMP_LOW
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}
        G90
        {% if act_z|float + z_safe|float < max_z|float %}
            {% if act_z < defaultcfg.park_z_min|int %}
                G1 Z{defaultcfg.park_z_min|int}
            {% else %}
                SAVE_GCODE_STATE NAME=save_state
                G1 Z{z_safe|int + act_z|int}
                RESTORE_GCODE_STATE NAME=save_state
            {% endif %}
        {% else %}
        G1 Z{z_safe|int}
        {% endif%}
        G90
        G1 X{defaultcfg.park_x|int} Y{defaultcfg.park_y|int} F{defaultcfg.park_speed|int}
        {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
    {% else %}
        STATUS_NOT_HOMED
    {% endif %}

[gcode_macro _TOOLHEAD_PARK_MAINTENANCE]
description: Move the toolhead to a convenient position for working on it
gcode:
    {% set defaultcfg = printer['gcode_macro _defaultcfg'] %} ; get defaultcfg variables
    {% set config = printer.configfile.settings %} ; get realtime configfile settings
    {% set max_x = config["stepper_x"]["position_max"]|float %} ; get max x position
    {% set max_y = config["stepper_y"]["position_max"]|float %} ; get max y position
    {% set max_z = config["stepper_z"]["position_max"]|float %} ; get max z position
    {% set mid_x = max_x / 2.0 %} ; get middle of x axis
    {% set mid_y = max_y / 2.0 %} ; get middle of y axis
    {% set mid_z = max_z / 2.0 %} ; get middle of z axis
    {% if maint_x < 0 or maint_y < 0 or maint_z < 0 %} ; if maintenance position is not defined move to middle of bed
        {% set move_x = mid_x %} ; use middle of x axis
        {% set move_y = mid_y %} ; use middle of y axis
        {% set move_z = mid_z %} ; use middle of z axis
    {% else %} ; otherwise,  move to defined positions
        {% set move_x = defaultcfg.maint_x %} ; get maintenance x position
        {% set move_y = defaultcfg.maint_y %} ; get maintenance y position
        {% set move_z = defaultcfg.maint_z %} ; get maintenance z position
    {% endif %}
    HOME_IF_NEEDED ; Home all axes (if not already homed)
    G0 X{move_x} Y{move_y} Z{move_z} F3000 ; Move to maintenance position
    STATUS_MAINTENANCE

[gcode_macro _TOOLHEAD_PARK_STANDBY]
description: Move the toolhead to a convenient position for working on it
gcode:
    {% set defaultcfg = printer['gcode_macro _defaultcfg'] %} ; get defaultcfg variables
    {% set config = printer.configfile.settings %} ; get realtime configfile settings
    {% set max_x = config["stepper_x"]["position_max"]|float %} ; get max x position
    {% set max_y = config["stepper_y"]["position_max"]|float %} ; get max y position
    {% set max_z = config["stepper_z"]["position_max"]|float %} ; get max z position
    {% set mid_x = max_x / 2.0 %} ; get middle of x axis
    {% set mid_y = max_y / 2.0 %} ; get middle of y axis
    {% set mid_z = max_z / 2.0 %} ; get middle of z axis
    {% if maint_x < 0 or maint_y < 0 or maint_z < 0 %} ; if maintenance position is not defined move to middle of bed
        {% set move_x = mid_x %} ; use middle of x axis
        {% set move_y = mid_y %} ; use middle of y axis
        {% set move_z = mid_z %} ; use middle of z axis
    {% else %} ; otherwise,  move to defined positions
        {% set move_x = defaultcfg.standby_x %} ; get maintenance x position
        {% set move_y = defaultcfg.standby_y %} ; get maintenance y position
        {% set move_z = defaultcfg.standby_z %} ; get maintenance z position
    {% endif %}
    HOME_IF_NEEDED ; Home all axes (if not already homed)
    G0 X{move_x} Y{move_y} Z{move_z} F3000 ; Move to maintenance position

[gcode_macro _TOOLHEAD_PARK_ORIGIN]
description: Move the toolhead to a convenient position for working on it
gcode:
    {% set defaultcfg = printer['gcode_macro _defaultcfg'] %} ; get defaultcfg variables
    {% set config = printer.configfile.settings %} ; get realtime configfile settings
    {% set max_x = config["stepper_x"]["position_max"]|float %} ; get max x position
    {% set max_y = config["stepper_y"]["position_max"]|float %} ; get max y position
    {% set max_z = config["stepper_z"]["position_max"]|float %} ; get max z position
    {% set mid_x = max_x / 2.0 %} ; get middle of x axis
    {% set mid_y = max_y / 2.0 %} ; get middle of y axis
    {% set mid_z = max_z / 2.0 %} ; get middle of z axis
    {% if maint_x < 0 or maint_y < 0 or maint_z < 0 %} ; if maintenance position is not defined move to middle of bed
        {% set move_x = mid_x %} ; use middle of x axis
        {% set move_y = mid_y %} ; use middle of y axis
        {% set move_z = mid_z %} ; use middle of z axis
    {% else %} ; otherwise,  move to defined positions
        {% set move_x = defaultcfg.origin_x %} ; get maintenance x position
        {% set move_y = defaultcfg.origin_y %} ; get maintenance y position
        {% set move_z = defaultcfg.origin_z %} ; get maintenance z position
    {% endif %}
    HOME_IF_NEEDED ; Home all axes (if not already homed)
    G0 X{move_x} Y{move_y} Z{move_z} F3000 ; Move to maintenance position

[gcode_macro _TOOLHEAD_PARK_PURGE]
description: Move the toolhead to a convenient position for working on it
gcode:
    {% set defaultcfg = printer['gcode_macro _defaultcfg'] %} ; get defaultcfg variables
    {% set config = printer.configfile.settings %} ; get realtime configfile settings
    {% set max_x = config["stepper_x"]["position_max"]|float %} ; get max x position
    {% set max_y = config["stepper_y"]["position_max"]|float %} ; get max y position
    {% set max_z = config["stepper_z"]["position_max"]|float %} ; get max z position
    {% set mid_x = max_x / 2.0 %} ; get middle of x axis
    {% set mid_y = max_y / 2.0 %} ; get middle of y axis
    {% set mid_z = max_z / 2.0 %} ; get middle of z axis
    {% if maint_x < 0 or maint_y < 0 or maint_z < 0 %} ; if maintenance position is not defined move to middle of bed
        {% set move_x = mid_x %} ; use middle of x axis
        {% set move_y = mid_y %} ; use middle of y axis
        {% set move_z = mid_z %} ; use middle of z axis
    {% else %} ; otherwise,  move to defined positions
        {% set move_x = defaultcfg.purge_x %} ; get maintenance x position
        {% set move_y = defaultcfg.purge_y %} ; get maintenance y position
        {% set move_z = defaultcfg.purge_z %} ; get maintenance z position
    {% endif %}
    HOME_IF_NEEDED ; Home all axes (if not already homed)
    G0 X{move_x} Y{move_y} Z{move_z} F3000 ; Move to maintenance position
################################
########### HOMING #############
################################
# Only home if not homed
[gcode_macro HOME_IF_NEEDED]
description: Homes the specified axes. If lazy is true, already homed axes are skipped. Usage: HOME_IF_NEEDED [AXES=<axes_string>]
gcode:
    {% if "x" in rawparams|string|lower %} ; if x is in rawparams
    {% set X = True %} ; set x flag
    {% endif %}
    {% if "y" in rawparams|string|lower %} ; if y is in rawparams
    {% set Y = True %} ; set y flag
    {% endif %}
    {% if "z" in rawparams|string|lower %} ; if z is in rawparams
    {% set Z = True %} ; set z flag
    {% endif %}
    {% if rawparams|string|lower == "" %} ; if no parameters are defined
    {% set ALL = True %} ; set all flag
    {% set X = True %}   ; set x flag
    {% set Y = True %}   ; set y flag
    {% set Z = True %}   ; set z flag
    {% endif %}
    {% if printer.toolhead.homed_axes != "xyz" %} ; if not homed
    {% if "x" not in printer.toolhead.homed_axes %} ; if x is not homed
        {% set home_x = True %} ; set home_x flag
    {% endif %}
    {% if "y" not in printer.toolhead.homed_axes %} ; if y is not homed
        {% set home_y = True %} ; set home_y flag
    {% endif %}
    {% if "z" not in printer.toolhead.homed_axes %} ; if z is not homed
        {% set home_z = True %} ; set home_z flag
    {% endif %}

    {% if home_x == True and home_y == True and home_z == True %} ; if all axes need to be homed
        {% if ALL == True %} ; if all axes are being homed
            STATUS_HOMING_ALL
            G28 ; Home all axes
            STATUS_HOMED_ALL
        {% else %} ; if only some axes are being homed
            {% if X == True %} ; if x is being homed
                STATUS_HOMING_X
                G28 X ; Home x axis
                STATUS_HOMED_X
            {% endif %}
            {% if Y == True %} ; if y is being homed
                STATUS_HOMING_Y
                G28 Y ; Home y axis
                STATUS_HOMED_Y
            {% endif %}
            {% if Z == True %} ; if z is being homed
                STATUS_HOMING_Z
                G28 Z ; Home z axis
                STATUS_HOMED_Z
            {% endif %}
        {% endif %}
    {% else %} ; if only some axes need to be homed
        {% if home_x == True %} ; if x needs to be homed
            {% if X == True %} ; if x is being homed
                STATUS_HOMING_X
                G28 X ; Home x axis
                STATUS_HOMED_X
            {% endif %}
        {% endif %}
        {% if home_y == True %} ; if y needs to be homed
            {% if Y == True %} ; if y is being homed
                STATUS_HOMING_Y
                G28 Y ; Home y axis
                STATUS_HOMED_Y
            {% endif %}
        {% endif %}
        {% if home_z == True %} ; if z needs to be homed
            {% if Z == True %} ; if z is being homed
                STATUS_HOMING_Z
                G28 Z ; Home z axis
                STATUS_HOMED_Z
            {% endif %}
        {% endif %}
    {% endif %}
    {% else %} ; if already homed
    STATUS_HOMED_ALL
    {% endif %}
    
