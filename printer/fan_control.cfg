[gcode_macro M106]
rename_existing: M106.0001
gcode:
    {% set m106 = printer['gcode_macro ADJUST_M106'] %}

    {% if m106.enable_override %}
        # S = The raw value that the slicer set for power
        # this is a floating point value from 0 to MAX_FLOAT.
        # It is cast to a float and divided by 255.0 to get the fan power as a float from 0.0 to MAX_FLOAT.
        # see: https://github.com/Klipper3d/klipper/blob/9f8f3cd77d97339bd825053b064ae4d08d5d6902/klippy/extras/fan.py#L68
        # if you dont specify S, 255.0 is the default value
        {% set S = params.S | default(255.0) %}

        # if S looks invalid, call the base macro implementation to generate the native error messages:
        {% if (S | float(-9999.9999) == -9999.9999) or (S | float < 0.0) %}
            # DEBUG
            # {action_respond_info("M106 input looks invalid")}
            M106.0001 S{S}
        {% else %}
            # klippy doesnt error if you submit a value larger than 255, it just caps it here https://github.com/Klipper3d/klipper/blob/9f8f3cd77d97339bd825053b064ae4d08d5d6902/klippy/extras/fan.py#L51
            # so we similarly cap it here
            {% set computed_s = (255.0, S | float) | min %}
            SET_GCODE_VARIABLE MACRO=ADJUST_M106 VARIABLE=last_s VALUE={computed_s}
            {% set fan_power = (computed_s / 2.55) %}  # fan power are a percentage

            # Only perform mapping on the value 0.0 if always is ON
            {% if fan_power != 0.0 or m106.always == "ON" %}
                # perform a mapping from [from_min, from_max] to [to_min, to_max]
                {% set map_from = [m106.from_min, m106.from_max] %}
                {% set map_to = [m106.to_min, m106.to_max] %}
                {% if fan_power < m106.from_min %}
                    # perform a mapping from [0, from_min] to [([0.0, to_min] | min), to_min]
                    {% set map_from = [0.0, m106.from_min] %}
                    {% set map_to = [([0.0, m106.to_min] | min), m106.to_min] %}
                {% elif fan_power > m106.from_max %}
                    # perform a mapping from [from_max, 100.0] to [to_max, ([100.0, to_min] | max)]
                    {% set map_from = [m106.from_max, 100.0] %}
                    {% set map_to = [m106.to_max, ([100.0, m106.to_min] | max)] %}
                {% endif %}
                # mapping math
                {% set fan_power = map_to[0] + ((map_to[1] - map_to[0]) / (map_from[1] - map_from[0])) * (fan_power - map_from[0]) %}
                # clamp to [0.0 100.0]
                {% set fan_power = [0.0, ([100.0, fan_power] | min)] | max %}
            {% endif %}

            # apply min/max limits
            {% set fan_power = [m106.max_power, ([m106.min_power, fan_power] | max)] | min %}

            # fan always on/off
            # get the off_below value of the fan.
            {% set fan_off_below = (printer["configfile"]["config"][m106.print_fan].off_below | float) * 100.0 %}
            # fan always on means the fan must always run
            {% if m106.always == "ON" and fan_power < fan_off_below %}
                # fan power must be at least the fan_off_below value
                {% set fan_power = fan_off_below %}
            # fan always off means the fan never runs
            {% elif m106.always == "OFF" %}
                {% set fan_power = 0.0 %}
            {% endif %}

            # DEBUG
            # {action_respond_info("Slicer fan power overridden %.1f -> %.1f" % (computed_s, fan_power * 2.55))}
            M106.0001 S{fan_power * 2.55}
        {% endif %}
    {% else %}
        M106.0001 {% for p in params%}{'%s%s ' % (p, params[p])}{% endfor %}

        # save the value after calling base implementation, so if the above line throws an error this one never runs
        {% if params.S is defined %}
            SET_GCODE_VARIABLE MACRO=ADJUST_M106 VARIABLE=last_s VALUE={params.S | float}
        {% endif %}
    {% endif %}

[gcode_macro ADJUST_M106]
variable_print_fan: "fan"
variable_last_s: 0.0
variable_min_power: 0.0
variable_max_power: 100.0
variable_always: "SLICER"   # 'SLICER' | 'ON' | 'OFF'
variable_from_min: 0.0
variable_from_max: 100.0
variable_to_min: 0.0
variable_to_max: 100.0
variable_enable_override: False
description: Modifies the behaiour of the M106 command to adjust or oeverride fan power settings from your slicer
gcode:
    {% set ENABLED = params.ENABLED | default(none) %}
    # if you call to apply a settings change it is assumed you want that setting applied immediatly
    # so ENABLED=true is assumed if the ENABLED parameter is omitted
    {% set ENABLED = (ENABLED is none) or ((ENABLED | string | lower) in ('1', 'true', 'on')) %}

    # set the fan
    {% set FAN = params.FAN | default(none) %}
    {% if not FAN is none %}
        {% set FAN = FAN | string %}
        {% if not FAN in printer or not FAN in printer["configfile"]["config"] %}
            {action_raise_error("No fan named '%s' found in the printer's config" % (FAN))}
        {% endif %}
    {% endif %}

    # max power must be more than min power
    {% set MAX = params.MAX | default(none) %}
    {% if not MAX is none %}
        {% set MAX = [100.0, [0.0, (MAX | float)] | max] | min %}
    {% endif %}

    {% set MIN = params.MIN | default(none) %}
    {% if not MIN is none %}
        {% set MIN = [100.0, [0.0, (MIN | float)] | max] | min %}
    {% endif %}

    {% if (not MAX is none) and (not MIN is none) and MAX < MIN %}
        {action_raise_error("MAX power must be greater than MIN power")}
    {% endif %}

    # ALWAYS=ON, ALWAYS=OFF, ALWAYS=SLICER
    {% set ALWAYS = params.ALWAYS | default(none) %}
    {% if not ALWAYS is none %}
        {% set ALWAYS = ALWAYS | string | upper %}
        {% if ALWAYS not in ("ON", "OFF", "SLICER") %}
            {action_raise_error("ALWAYS can be one of: 'SLICER', 'ON' or 'OFF'")}
        {% endif %}
    {% endif %}

    # Format is: either a number or adjust_value|threashold, e.g. ADJUST_HIGH=10|50 would increase fan values by 10 at/above 50
    {% set ADJUST = params.ADJUST | default(none) %}
    {% if not ADJUST is none %}
        {% set from_min = 0.0 %}
        {% set from_max = 100.0 %}
        {% set to_min = 0.0 %}
        {% set to_max = 100.0 %}
        {% if ADJUST | float(-99999.9999) != -99999.9999 %}
            {% set to_min = 0.0 + (ADJUST | float) %}
            {% set to_max = 100.0 + (ADJUST | float) %}
        {% else %}
            {% set split_adjust = (ADJUST | string).split("|") %}
            {% if (split_adjust | length) != 2 %}
                {action_raise_error("ADJUST format error, missing '|', expected 'n->n|n->n'")}
            {% endif %}
            {% if split_adjust[0] | length > 0 %}
                {% set split_low = (split_adjust[0]).split("->") %}
                {% if (split_low | length) != 2 %}
                    {action_raise_error("ADJUST value error, didnt find 2 values in the minimum mapping")}
                {% endif %}
                {% set from_min = split_low[0] | float %}
                {% if from_min > 100.0 or to_min < 0.0 %}
                    {action_raise_error("ADJUST value error, minimum from value not in range [0.0, 100.0]")}
                {% endif %}
                {% set to_min = split_low[1] | float %}
                {% if to_min > 200.0 or to_min < -100.0 %}
                    {action_raise_error("ADJUST value error, minimum to value not in range [-100.0, 200.0]")}
                {% endif %}
            {% endif %}

            {% if split_adjust[1] | length > 0 %}
                {% set split_high = (split_adjust[1]).split("->") %}
                {% if (split_high | length) != 2 %}
                    {action_raise_error("ADJUST value error, didnt find 2 values in the maximum mapping")}
                {% endif  %}
                {% set from_max = split_high[0] | float %}
                {% if from_max > 100.0 or from_max < 0.0 %}
                    {action_raise_error("ADJUST value error, maximum from value not in range [0.0, 100.0]")}
                {% endif %}
                {% set to_max = split_high[1] | float %}
                {% if to_max > 200.0 or to_max < -100.0%}
                    {action_raise_error("ADJUST value error, maximum to value not in range [-100.0, 200.0]")}
                {% endif %}
            {% endif %}
        {% endif %}
        # the 2 from extents cant cross
        {% if from_min > from_max %}
            {action_raise_error("ADJUST value error, minimum from value must be less than or equal to the maximum from value")}
        {% endif %}
        {% if to_min > to_max %}
            {action_raise_error("ADJUST value error, minimum to value must be less than or equal to the maximum to value")}
        {% endif %}
    {% endif %}

    {% set m106 = printer['gcode_macro ADJUST_M106'] %}

    # all parameter unpacking and checking has been completed, save anything that was set
    SET_GCODE_VARIABLE MACRO=ADJUST_M106 VARIABLE=enable_override VALUE={ENABLED}
    {% if not FAN is none %}
        SET_GCODE_VARIABLE MACRO=ADJUST_M106 VARIABLE=print_fan VALUE="'{FAN}'"
    {% endif%}
    {% if not MAX is none %}
        SET_GCODE_VARIABLE MACRO=ADJUST_M106 VARIABLE=max_power VALUE={MAX}
    {% endif %}
    {% if not MIN is none %}
        SET_GCODE_VARIABLE MACRO=ADJUST_M106 VARIABLE=min_power VALUE={MIN}
    {% endif %}
    {% if not ALWAYS is none %}
        SET_GCODE_VARIABLE MACRO=ADJUST_M106 VARIABLE=always VALUE="'{ALWAYS}'"
    {% endif %}
    {% if not ADJUST is none %}
        SET_GCODE_VARIABLE MACRO=ADJUST_M106 VARIABLE=from_min VALUE={from_min}
        SET_GCODE_VARIABLE MACRO=ADJUST_M106 VARIABLE=from_max VALUE={from_max}
        SET_GCODE_VARIABLE MACRO=ADJUST_M106 VARIABLE=to_min   VALUE={to_min}
        SET_GCODE_VARIABLE MACRO=ADJUST_M106 VARIABLE=to_max   VALUE={to_max}
    {% endif %}

    # apply settngs to fan now
    M106 S{m106.last_s}

    # show results of changes:
    SHOW_M106

[gcode_macro SHOW_M106]
description: Show all settings in M106
gcode:
    {% set m106 = printer['gcode_macro ADJUST_M106'] %}
    {action_respond_info("Part Cooling Override Info. Enabled?: %s, Fan: %s (off below %.1f%%)" % (m106.enable_override, m106.print_fan, (printer["configfile"]["config"][m106.print_fan].off_below | float) * 100))}
    {action_respond_info("Min Power: %.1f%%, Max Power: %.1f%%, Always On: %s" % (m106.min_power, m106.max_power, m106.always))}
    {% if m106.from_min == 0.0 and m106.from_max == 100.0 and  m106.to_min == (m106.to_max - 100.0) %}
        {action_respond_info("Power Adjustment: %.1f%%" % (m106.to_min))}
    {% else %}
        {action_respond_info("Power Mapping: %.1f%% -> %.1f%% : %.1f%% -> %.1f%%" % (m106.from_min, m106.to_min, m106.from_max, m106.to_max))}
    {% endif %}
    {action_respond_info("Slicer power setting: %.1f%% (%.1f), Actual fan power: %.1f%% (%.1f)" % (m106.last_s / 2.55, m106.last_s, (printer[m106.print_fan].speed) * 100.0, (printer[m106.print_fan].speed) * 255.0))}

[gcode_macro RESET_M106]
description: Reset all settings to defaults found in ADJUST_M106
gcode:
    ADJUST_M106 MIN=0 MAX=100 ADJUST=0 ALWAYS=SLICER ENABLED=FALSE

[gcode_macro M107]
rename_existing: M107.0001
description: Overrides the M107 command to stop the slicer from shutting off the fan if so configured
gcode:
    # calling M107 implies the slicer wants 0 fan speed
    SET_GCODE_VARIABLE MACRO=ADJUST_M106 VARIABLE=last_s VALUE=0.0
    {% set m106 = printer['gcode_macro ADJUST_M106'] %}
    {% if m106.enable_override is false or m106.always != "ON" %}
        M107.0001
    {% endif %}
