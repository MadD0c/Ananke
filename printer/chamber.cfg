################################
########### HEAT_SOAK ##########
################################
#[gcode_macro HEAT_SOAK]
#gcode:
#    {% set defaultcfg = printer['gcode_macro _defaultcfg'] %} ; get defaultcfg variables
#    {% set printcfg = printer['gcode_macro _printcfg'] %}
#    {% if defaultcfg.time_soak == True %}
#        # Start timer
#        UPDATE_DELAYED_GCODE ID=heat_soak_timer DURATION={defaultcfg.chamber_time*60}
#        SET_GCODE_VARIABLE MACRO=_cachevar VARIABLE=heat_soak_complete VALUE=False
#    {% endif %}
#    {% if defaultcfg.temp_soak == True %}
#        _SET_CHAMBER TEMP={defaultcfg.chamber_temp} WAIT=true
#        SET_GCODE_VARIABLE MACRO=_cachevar VARIABLE=heat_soak_complete VALUE=True
#    {% endif %}

################################
######## Heat Soak Timer #######
################################
#[delayed_gcode _HEAT_SOAK_TIMER]
#gcode:
#    {% set defaultcfg = printer['gcode_macro _defaultcfg'] %} ; get defaultcfg variables
#    {% set cachevar = printer['gcode_macro _cachevar'] %} ; get defaultcfg variables
#    SET_GCODE_VARIABLE MACRO=_cachevar VARIABLE=heat_soak_complete VALUE=True
#    {% if defaultcfg.starting_print == True %}
#        # Soak complete, resume starting print
#        RESUME_BASE
#    {% endif %}

################################
###### CHAMBER CONTROL #########
################################
#[gcode_macro _SET_CHAMBER]
#gcode:
#    {% set defaultcfg = printer['gcode_macro _defaultcfg'] %} ; get defaultcfg variables
#    {% set config = printer.configfile.settings %} ; get realtime configfile settings
#    # Parameters
#    {% set TEMP = params.TEMP|default(0)|float %}
#    {% set WAIT = params.WAIT|default('false')|lower %}
#    {% set SPEED = params.SPEED|default(0)|float %}
#    # Determine chamber type
#    {% if defaultcfg.chamber_type == 'generic_fan' %}
#        # Set chamber fan speed
#        SET_FAN_SPEED FAN={defaultcfg.chamber_name} SPEED={SPEED}
#    {% elif defaultcfg.chamber_type == 'heater' %}
#        # Set chamber temperature
#        SET_HEATER_TEMPERATURE HEATER={defaultcfg.chamber_name} TARGET={TARGET}
#        {% if WAIT == 'true' %}
#            # Wait for chamber temperature
#            TEMPERATURE_WAIT SENSOR={defaultcfg.chamber_name} MINIMUM={TARGET} MAXIMUM={TARGET+25}
#        {% endif %}
#    {% elif defaultcfg.chamber_type == 'temperature_sensor' %}
#        {% if WAIT == 'true' %}
#            # Wait for chamber temperature
#            TEMPERATURE_WAIT SENSOR={defaultcfg.chamber_name} MINIMUM={TARGET} MAXIMUM={TARGET+25}
#        {% endif %}
#    {% endif %}#


[gcode_macro HEAT_SOAK]
description: heats the bed for a while

variable_target_temp: 0
variable_stage: None ## heating -> soaking -> done -> None

## in seconds
variable_check_interval: 10
variable_soak_time_remaining: 0
variable_total_time_elapsed: 0
gcode:
    {% set soak_macro = printer["gcode_macro HEAT_SOAK"] %}    
    {% set TARGET = params.TARGET | default(110) | float %}
    {% set DURATION = (params.DURATION | default(10) | int) * 60 %} ## minutes to seconds
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE={ TARGET }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage               VALUE="'heating'"
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ DURATION }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    ;; fire up the heater
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={ TARGET }
    ;; Do the lights
    #STATUS_SOAKING
    ;; run the fans to circulate air
    _FAN_SOAK
    ;; home the printer
    G28
    ;; put the bed and nozzle where a safe distance apart
    #PARKBED_MID
    M84 ;; turn off steppers
    ;; Do the lights (again)
    #STATUS_SOAKING
    M118  Soaking...
    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ check_interval }

[gcode_macro CANCEL_HEAT_SOAK]
description: cancels an in-progress HEAT_SOAK cycle
gcode:
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'cancel'"
    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION=1

[delayed_gcode heat_soaker]
; ## debug
; { action_respond_info( printer['gcode_macro HEAT_SOAK'] | tojson )}
gcode:
    {% set soak_macro = printer["gcode_macro HEAT_SOAK"] %}    
    {% set heat_soak = printer['gcode_macro HEAT_SOAK'] %}
    ## update total time elapsed
    {% set total_time_elapsed = heat_soak.total_time_elapsed + heat_soak.check_interval %}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }
    {% set stage = heat_soak.stage %}
    {% if stage == "heating" and printer.heater_bed.temperature >= heat_soak.target_temp %}
        {% set stage = "soaking" %}
    {% endif %}
    {% if stage == "soaking" %}
        ## update soak countdown
        {% set soak_time_remaining = [heat_soak.soak_time_remaining - heat_soak.check_interval, 0] | max %}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ soak_time_remaining }

        {% if soak_time_remaining == 0 %}
            {% set stage = "done" %}
        {% endif %}
    {% endif %}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'{ stage }'"

    {% if stage in ("done", "cancel") %}
        _FAN_SOAK_OFF
        {% if stage == "cancel" %}
            {% set stage = "done" %}
            TURN_OFF_HEATERS
            M107 ; turn off fan
            M118  { "soak cancelled after ~%.1fm" | format(total_time_elapsed / 60.0) }
        {% else %}
            M118  { "soak complete after %.1fm" | format(total_time_elapsed / 60.0) }
        {% endif %}
        ## reset all state vars, except stage, which may be queried via the api
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0
    {% else %}
        {% set BED_TARGET = printer.heater_bed.target|float %}
        {% set BED_TEMP = printer.heater_bed.temperature|float %}
        {% if total_time_elapsed % 90 == 0 %}
            ## output status periodically
            {% if stage == "heating" %}
                M118  { "heating -- %.1fm elapsed" | format(total_time_elapsed / 60.0) }
            {% elif stage == "soaking" %}
                M118  { "soaking -- %.1fm remaining" | format(soak_time_remaining / 60.0) }
            {% endif %}
        {% endif %}
        ## trigger ourselves again
        UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ heat_soak.check_interval }
        ## dwell for 1ms to prevent from going idle
        G4 P1
    {% endif %}

[gcode_macro _FAN_SOAK]
gcode:
    #NEVERMORE_LOW
    #BED_FAN_ON
    #PI_FAN_ON
    #SYSTEM_FAN_ON

[gcode_macro _FAN_SOAK_OFF]
gcode:
    #NEVERMORE_OFF
    #BED_FAN_OFF

### Chamber Temp ###
[gcode_macro M141]
description: Set the chamber temperature
gcode:
    {% set defaultcfg = printer['gcode_macro _defaultcfg'] %} ; get defaultcfg variables
    {% set chamber_name = defaultcfg.chamber_name %}
    {% set chamber_type = defaultcfg.chamber_type %}
    # Parameters
    {% set targ = params.S|default(0)|float %}
    # chamber sensor alias
    {% set chamber = chamber_type + ' ' + chamber_name %}
    # chamber temperature alias
    {% set temp = printer[chamber].temperature %}
    # chamber target status
    M118 Chamber Target: {targ}
    # current chamber temp
    M118 Chamber Temperature: {temp}
    {% if chamber_type == 'temperature_fan' %}
        # Temperature Fan
        SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN={chamber_name} TARGET={targ}
    {% elif chamber_type == 'heater' %}
        # Active Heater
        SET_HEATER_TEMPERATURE HEATER={chamber_name} TARGET={targ}
    {% endif %}


################################
############# M191 #############
################################

# USAGE: M191 S<VALUE>

# The fuzz variable defines how much above or below the target
# temp is considered acceptable for the wait command to complete.

[gcode_macro M191]
description: Set and wait for the chamber temperature
variable_fuzz: 5
gcode:
    # Variables from M141
    {% set defaultcfg = printer['gcode_macro _defaultcfg'] %} ; get defaultcfg variables
    {% set chamber_type = defaultcfg.chamber_name %}
    {% set chamber_type = defaultcfg.chamber_type %}
    # Parameters
    {% set targ = params.S|default(0)|float %}
    # chamber sensor alias
    {% set chamber = chamber_type + ' ' + chamber_name %}
    # chamber temperature alias
    {% set temp = printer[chamber].temperature %}
    # Set target temp
    M141 {rawparams}
    # Wait for target to be reached
    TEMPERATURE_WAIT SENSOR={chamber} MINIMUM={targ-fuzz} MAXIMUM={targ+fuzz}
    # Complete
    M118 Chamber Target Reached: {temp} at {targ}
