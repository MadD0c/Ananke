[gcode_macro G0]

rename_existing: G0.1

gcode:

  G1 {rawparams}


[gcode_macro G1]

rename_existing: G1.1

variable_z_hop_offset = 0

gcode:

  {% set OFFSET = printer["gcode_macro G1"].z_hop_offset %}

  {% if printer.gcode_move.absolute_coordinates and OFFSET > 0 and ('Z' in params) %}

    ; Rewrite paramters for adjust Z if offset is activ and we are absulute

    {% set new_params = ''|string %}

    {% if ('E' in params) %}

      {% set new_params = new_params ~ " E" ~ params.E %}

    {% endif %}

 

    {% if ('F' in params) %}

      {% set new_params = new_params ~ " F" ~ params.F %}

    {% endif %}

 

    {% if ('X' in params) %}

      {% set new_params = new_params ~ " X" ~ params.X %}

    {% endif %}

 

    {% if ('Y' in params) %}

      {% set new_params = new_params ~ " Y" ~ params.Y %}

    {% endif %}

 

   

    {% set new_params = new_params ~ (' Z%g' % (params.Z|float + OFFSET))|string %}

   

    ; Make the movement

    G1.1{new_params}

  {% else %}

    ; Don't care if relativ or no offset activ

    G1.1 {rawparams}

  {% endif %}



[gcode_macro G2]

rename_existing: G2.1

gcode:

  {% set OFFSET = printer["gcode_macro G1"].z_hop_offset %}

  {% if printer.gcode_move.absolute_coordinates and OFFSET > 0 and ('Z' in params) %}

    ; Rewrite paramters for adjust Z if offset is activ and we are absulute


    {% set new_params = [] %}

    {% for key in params %}

      {% if key == "Z" %}

        {% set x = new_params.append('Z%g' % (params[key]|float + OFFSET)) %}

      {% else %}

        {% set x = new_params.append(key + params[key]) %}

      {% endif %}

    {% endfor %}


    {% set new_params=new_params|join(" ") %}


    ; Make the movement

    G2.1 {new_params}

  {% else %}

    ; Don't care if relativ or no offset activ

    G2.1 {rawparams}

  {% endif %}


[gcode_macro G3]

rename_existing: G3.1

gcode:

  {% set OFFSET = printer["gcode_macro G1"].z_hop_offset %}

  {% if printer.gcode_move.absolute_coordinates and OFFSET > 0 and ('Z' in params) %}

    ; Rewrite paramters for adjust Z if offset is activ and we are absulute


    {% set new_params = [] %}

    {% for key in params %}

      {% if key == "Z" %}

        {% set x = new_params.append('Z%g' % (params[key]|float + OFFSET)) %}

      {% else %}

        {% set x = new_params.append(key + params[key]) %}

      {% endif %}

    {% endfor %}


    {% set new_params=new_params|join(" ") %}


    ; Make the movement

    G3.1 {new_params}

  {% else %}

    ; Don't care if relativ or no offset activ

    G3.1 {rawparams}

  {% endif %}


# Hacked G11 (unretract) for have a short delay after unretract, remove it or set wait to 0, if this is not needed.

[gcode_macro G11]

rename_existing: G11.1

gcode:

  {% set OFFSET = printer["gcode_macro G1"].z_hop_offset %}

  ; Z-UNHOP

  {% if OFFSET > 0 %}

    {% set VELOCITY = printer.save_variables.variables.current_zhop_velocity|default(300)|float %}

    SET_GCODE_VARIABLE MACRO=G1 VARIABLE=z_hop_offset VALUE=0

    {% set speed = printer.gcode_move.speed %}

    ; Make a different movement coresponting to current coordinate mode

    {% if printer.gcode_move.absolute_coordinates %}

      #G1.1 F{VELOCITY} Z{(printer.gcode_move.position.z - OFFSET)}

      G91

      G1.1 Z-{OFFSET} F{VELOCITY}

      G90

    {% else %}

      G1.1 Z-{OFFSET} F{VELOCITY}

    {% endif %}

    G1.1 F{speed}

  {% endif %}


  G11.1

  ; Have an addional parameter for wait after unretract

  {% set wait = printer.save_variables.variables.current_unretract_wait|default(0)|float %}

  {% if wait > 0 %}

    G4 P{'%d' %wait}

  {% endif %}


# Hacked G10 (retract) with ZHOP

[gcode_macro G10]

rename_existing: G10.1

gcode:

  {% set OFFSET = printer["gcode_macro G1"].z_hop_offset %}

  ; Make the retract

  G10.1


  ; Make the ZHOP

  {% set HEIGHT = printer.save_variables.variables.current_zhop_height|default(0)|float %}


  {% if HEIGHT > 0 %}

    {% if OFFSET > 0 %}

      SHOW_MSG MSG="ZHOP allready activ"

    {% else %}

      {% set VELOCITY = printer.save_variables.variables.current_zhop_velocity|default(300)|float %}

      {% set speed = printer.gcode_move.speed %}

      SET_GCODE_VARIABLE MACRO=G1 VARIABLE=z_hop_offset VALUE={HEIGHT}

      ; Make a different movement coresponting to current coordinate mode

      {% if printer.gcode_move.absolute_coordinates %}

        #SHOW_MSG MSG="G10 abs up: {(printer.gcode_move.position.z + HEIGHT)}"

        #G1.1 Z{(printer.gcode_move.position.z + HEIGHT)} F{VELOCITY}

        G91

        G1.1 Z{HEIGHT} F{VELOCITY}

        G90

      {% else %}

        G1.1 Z{HEIGHT} F{VELOCITY}

      {% endif %}

      G1.1 F{speed}

    {% endif %}

  {% endif %}



# Set the wished ZHOP height/distance. Set to 0 will disable it!

[gcode_macro SET_ZHOP]

gcode:

  {% set HEIGHT = params.HEIGHT|default(0)|float %}

  {% set VELOCITY = params.VELOCITY|default(300)|float %}

  {% if VELOCITY > 0 %}

    SAVE_VARIABLE VARIABLE='current_zhop_velocity' VALUE={VELOCITY}

  {% endif %}

  {% if HEIGHT >= 0 %}

    SAVE_VARIABLE VARIABLE='current_zhop_height' VALUE={HEIGHT}

    SHOW_MSG MSG="ZHOP: Z{HEIGHT}/F{VELOCITY}"

  {% endif %}


# This should allways be part of the start gcode. Worestcase you will print with an positive offset.

[gcode_macro CLEAR_ZHOP]

gcode:

  SET_GCODE_VARIABLE MACRO=G1 VARIABLE=z_hop_offset VALUE=0


# Print ZHOP settings

[gcode_macro GET_ZHOP]

gcode:

  {% set HEIGHT = printer.save_variables.variables.current_zhop_height|default(0)|float %}

  {% set VELOCITY = printer.save_variables.variables.current_zhop_velocity|default(300)|float %}

  {% set OFFSET = printer["gcode_macro G1"].z_hop_offset %}

  SHOW_MSG MSG="ZHOP height:    {HEIGHT}"

  SHOW_MSG MSG="ZHOP velocity:  {VELOCITY}"

  SHOW_MSG MSG="ZHOP retracted: {'yes' if (OFFSET > 0) else 'no'}"


[gcode_macro SHOW_MSG]

gcode:

  {% set MSG = params.MSG|default("No msg")|string %}

  M117 {MSG}

  RESPOND MSG={'"%s"' % MSG}





[gcode_macro G0]

rename_existing: G0.1

gcode:

  G1 {rawparams}


[gcode_macro G1]

rename_existing: G1.1

variable_z_hop_offset = 0

gcode:

  {% set OFFSET = printer["gcode_macro G1"].z_hop_offset %}

  {% if printer.gcode_move.absolute_coordinates and OFFSET > 0 and ('Z' in params) %}

    ; Rewrite paramters for adjust Z if offset is activ and we are absulute

    {% set new_params = ''|string %}

    {% if ('E' in params) %}

      {% set new_params = new_params ~ " E" ~ params.E %}

    {% endif %}

 

    {% if ('F' in params) %}

      {% set new_params = new_params ~ " F" ~ params.F %}

    {% endif %}

 

    {% if ('X' in params) %}

      {% set new_params = new_params ~ " X" ~ params.X %}

    {% endif %}

 

    {% if ('Y' in params) %}

      {% set new_params = new_params ~ " Y" ~ params.Y %}

    {% endif %}

 

   

    {% set new_params = new_params ~ (' Z%g' % (params.Z|float + OFFSET))|string %}

   

    ; Make the movement

    G1.1{new_params}

  {% else %}

    ; Don't care if relativ or no offset activ

    G1.1 {rawparams}

  {% endif %}



[gcode_macro G2]

rename_existing: G2.1

gcode:

  {% set OFFSET = printer["gcode_macro G1"].z_hop_offset %}

  {% if printer.gcode_move.absolute_coordinates and OFFSET > 0 and ('Z' in params) %}

    ; Rewrite paramters for adjust Z if offset is activ and we are absulute


    {% set new_params = [] %}

    {% for key in params %}

      {% if key == "Z" %}

        {% set x = new_params.append('Z%g' % (params[key]|float + OFFSET)) %}

      {% else %}

        {% set x = new_params.append(key + params[key]) %}

      {% endif %}

    {% endfor %}


    {% set new_params=new_params|join(" ") %}


    ; Make the movement

    G2.1 {new_params}

  {% else %}

    ; Don't care if relativ or no offset activ

    G2.1 {rawparams}

  {% endif %}


[gcode_macro G3]

rename_existing: G3.1

gcode:

  {% set OFFSET = printer["gcode_macro G1"].z_hop_offset %}

  {% if printer.gcode_move.absolute_coordinates and OFFSET > 0 and ('Z' in params) %}

    ; Rewrite paramters for adjust Z if offset is activ and we are absulute


    {% set new_params = [] %}

    {% for key in params %}

      {% if key == "Z" %}

        {% set x = new_params.append('Z%g' % (params[key]|float + OFFSET)) %}

      {% else %}

        {% set x = new_params.append(key + params[key]) %}

      {% endif %}

    {% endfor %}


    {% set new_params=new_params|join(" ") %}


    ; Make the movement

    G3.1 {new_params}

  {% else %}

    ; Don't care if relativ or no offset activ

    G3.1 {rawparams}

  {% endif %}


# Hacked G11 (unretract) for have a short delay after unretract, remove it or set wait to 0, if this is not needed.

[gcode_macro G11]

rename_existing: G11.1

gcode:

  {% set OFFSET = printer["gcode_macro G1"].z_hop_offset %}

  ; Z-UNHOP

  {% if OFFSET > 0 %}

    {% set VELOCITY = printer.save_variables.variables.current_zhop_velocity|default(300)|float %}

    SET_GCODE_VARIABLE MACRO=G1 VARIABLE=z_hop_offset VALUE=0

    {% set speed = printer.gcode_move.speed %}

    ; Make a different movement coresponting to current coordinate mode

    {% if printer.gcode_move.absolute_coordinates %}

      #G1.1 F{VELOCITY} Z{(printer.gcode_move.position.z - OFFSET)}

      G91

      G1.1 Z-{OFFSET} F{VELOCITY}

      G90

    {% else %}

      G1.1 Z-{OFFSET} F{VELOCITY}

    {% endif %}

    G1.1 F{speed}

  {% endif %}


  G11.1

  ; Have an addional parameter for wait after unretract

  {% set wait = printer.save_variables.variables.current_unretract_wait|default(0)|float %}

  {% if wait > 0 %}

    G4 P{'%d' %wait}

  {% endif %}


# Hacked G10 (retract) with ZHOP

[gcode_macro G10]

rename_existing: G10.1

gcode:

  {% set OFFSET = printer["gcode_macro G1"].z_hop_offset %}

  ; Make the retract

  G10.1


  ; Make the ZHOP

  {% set HEIGHT = printer.save_variables.variables.current_zhop_height|default(0)|float %}


  {% if HEIGHT > 0 %}

    {% if OFFSET > 0 %}

      SHOW_MSG MSG="ZHOP allready activ"

    {% else %}

      {% set VELOCITY = printer.save_variables.variables.current_zhop_velocity|default(300)|float %}

      {% set speed = printer.gcode_move.speed %}

      SET_GCODE_VARIABLE MACRO=G1 VARIABLE=z_hop_offset VALUE={HEIGHT}

      ; Make a different movement coresponting to current coordinate mode

      {% if printer.gcode_move.absolute_coordinates %}

        #SHOW_MSG MSG="G10 abs up: {(printer.gcode_move.position.z + HEIGHT)}"

        #G1.1 Z{(printer.gcode_move.position.z + HEIGHT)} F{VELOCITY}

        G91

        G1.1 Z{HEIGHT} F{VELOCITY}

        G90

      {% else %}

        G1.1 Z{HEIGHT} F{VELOCITY}

      {% endif %}

      G1.1 F{speed}

    {% endif %}

  {% endif %}



# Set the wished ZHOP height/distance. Set to 0 will disable it!

[gcode_macro SET_ZHOP]

gcode:

  {% set HEIGHT = params.HEIGHT|default(0)|float %}

  {% set VELOCITY = params.VELOCITY|default(300)|float %}

  {% if VELOCITY > 0 %}

    SAVE_VARIABLE VARIABLE='current_zhop_velocity' VALUE={VELOCITY}

  {% endif %}

  {% if HEIGHT >= 0 %}

    SAVE_VARIABLE VARIABLE='current_zhop_height' VALUE={HEIGHT}

    SHOW_MSG MSG="ZHOP: Z{HEIGHT}/F{VELOCITY}"

  {% endif %}


# This should allways be part of the start gcode. Worestcase you will print with an positive offset.

[gcode_macro CLEAR_ZHOP]

gcode:

  SET_GCODE_VARIABLE MACRO=G1 VARIABLE=z_hop_offset VALUE=0


# Print ZHOP settings

[gcode_macro GET_ZHOP]

gcode:

  {% set HEIGHT = printer.save_variables.variables.current_zhop_height|default(0)|float %}

  {% set VELOCITY = printer.save_variables.variables.current_zhop_velocity|default(300)|float %}

  {% set OFFSET = printer["gcode_macro G1"].z_hop_offset %}

  SHOW_MSG MSG="ZHOP height:    {HEIGHT}"

  SHOW_MSG MSG="ZHOP velocity:  {VELOCITY}"

  SHOW_MSG MSG="ZHOP retracted: {'yes' if (OFFSET > 0) else 'no'}"


[gcode_macro SHOW_MSG]

gcode:

  {% set MSG = params.MSG|default("No msg")|string %}

  M117 {MSG}

  RESPOND MSG={'"%s"' % MSG}


#For SHOW_MSG macro:

[respond]