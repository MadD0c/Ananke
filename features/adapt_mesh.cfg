
################################
######## ADAPTIVE MESH #########
################################
[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
gcode:
    {% set defaultcfg = printer['gcode_macro _defaultcfg'] %} ; get defaultcfg variables
    {% set notifycfg = printer["gcode_macro _notifycfg"] %} ; get notifycfg variables
    {% set config = printer.configfile.settings %} ; get realtime configfile settings
    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
    {% set bed_mesh_min = config.bed_mesh.mesh_min %}
    {% set bed_mesh_max = config.bed_mesh.mesh_max %}
    {% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (config.bed_mesh.probe_count[0]-2) %}
    {% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (config.bed_mesh.probe_count[1]-2) %}
    {% set x_min = bed_mesh_min[0] %}
    {% set y_min = bed_mesh_min[1] %}
    {% set x_max = bed_mesh_max[0] %}
    {% set y_max = bed_mesh_max[1] %}
    { action_respond_info("{} points, clamping to mesh [{!r} {!r}]".format(
        all_points | count,
        bed_mesh_min,
        bed_mesh_max,
    )) }
    {% if defaultcfg.mesh_fuzz_enable == True %}
        {% if all_points %}
            {% set fuzz_range = range(defaultcfg.mesh_fuzz_min * 100 | int, defaultcfg.mesh_fuzz_max * 100 | int) %}
            {% set x_min = ( bed_mesh_min[0], ((all_points | map(attribute=0) | min - (fuzz_range | random / 100.0)) | default(bed_mesh_min[0])) ) | max %}
            {% set y_min = ( bed_mesh_min[1], ((all_points | map(attribute=1) | min - (fuzz_range | random / 100.0)) | default(bed_mesh_min[1])) ) | max %}
            {% set x_max = ( bed_mesh_max[0], ((all_points | map(attribute=0) | max + (fuzz_range | random / 100.0)) | default(bed_mesh_max[0])) ) | min %}
            {% set y_max = ( bed_mesh_max[1], ((all_points | map(attribute=1) | max + (fuzz_range | random / 100.0)) | default(bed_mesh_max[1])) ) | min %}
        {% endif %}
    {% else %}
        {% set x_min = [ bed_mesh_min[0], (all_points | map(attribute=0) | min | default(bed_mesh_min[0])) ] | max %}
        {% set y_min = [ bed_mesh_min[1], (all_points | map(attribute=1) | min | default(bed_mesh_min[1])) ] | max %}
        {% set x_max = [ bed_mesh_max[0], (all_points | map(attribute=0) | max | default(bed_mesh_max[0])) ] | min %}
        {% set y_max = [ bed_mesh_max[1], (all_points | map(attribute=1) | max | default(bed_mesh_max[1])) ] | min %}
    {% endif %}
    { action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(
        (x_min, y_min), 
        (x_max, y_max),
    )) }
    {% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | int) + 2 %}
    {% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | int) + 2 %}
    {% if (([points_x, points_y]|max) > 6) %}
        {% set algorithm = "bicubic" %}
        {% set min_points = 4 %}
    {% else %}
        {% set algorithm = "lagrange" %}
        {% set min_points = 3 %}
    {% endif %}
    { action_respond_info( "Algorithm: {}".format(algorithm)) }
    {% set points_x = [points_x, min_points]|max  %}
    {% set points_y = [points_y, min_points]|max  %}
    { action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }
    {% if config.bed_mesh.relative_reference_index is defined %}
        {% set ref_index = (points_x * points_y / 2) | int %}
        { action_respond_info( "Reference index: {}".format(ref_index) ) }  
    {% else %}
        {% set ref_index = -1 %}
    {% endif %}
    {% if defaultcfg.docking_probe == True %}
        {defaultcfg.attach_macro}              # Attach/deploy a probe if the probe is stored somewhere outside of the print area
    {% endif %}
    {% if notifycfg.led_status == True %}
        {notifycfg.led_status_mesh} ; LED feedback
    {% endif %}
    _BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}
    {% if defaultcfg.docking_probe == True %}
        {defaultcfg.dock_macro}              # Detach/stow a probe if the probe is stored somewhere outside of the print area
    {% endif %}