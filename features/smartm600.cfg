#####################################
#   Smart Filament Change Macros    #
#      Version 2.5.5 2023-5-6       #
#####################################
#####     PLEASE READ BELOW     #####
#####################################
# This macro requires configuration!
# 
# More information available here:
# https://github.com/rootiest/zippy-klipper_config/blob/master/extras/filament_change/README.md
# 
# You must adjust the variables
# under M600 CONFIGURATION to fit
# the specifications of your machine.

################################
####### CHANGE_FILAMENT ########
################################
[gcode_macro CHANGE_FILAMENT]
description: Change the filament in toolhead
gcode:
    {% set smart_m600cfg = printer["gcode_macro _smart_m600cfg"] %}
    CG28
    SET_GCODE_VARIABLE MACRO=_smart_m600cfg VARIABLE=coldstart VALUE=True
    M{notifycfg.output|int} Filament Change
    M600
    UNLOAD_FILAMENT
    {% if smart_m600cfg.auto_sensor == True %}
        ENABLEFILAMENTSENSOR
    {% endif %}

################################
######### COLOR_CHANGE #########
################################
[gcode_macro COLOR_CHANGE]
description: Procedure when Color Change is triggered
gcode:
    {% set smart_m600cfg = printer["gcode_macro _smart_m600cfg"] %} ; get smart_m600cfg variables
    {% set notifycfg = printer["gcode_macro _notifycfg"] %} ; get notifycfg variables
    M{notifycfg.output|int} Filament Runout
    {% if smart_m600cfg.use_telegram == True %}
      {notifycfg.telegram_runout}
    {% endif %}
    SET_IDLE_TIMEOUT TIMEOUT={smart_m600cfg.m600_idle_time}
    {% if notifycfg.audio_status == True %} ; if using audio status alerts
        {notifycfg.m600_audio}
    {% endif %}
    M600
    SET_GCODE_VARIABLE MACRO=_smart_m600cfg VARIABLE=prev_temp VALUE={printer.extruder.target}
    SET_GCODE_VARIABLE MACRO=_smart_m600cfg VARIABLE=runout VALUE=True
    M{notifycfg.output|int} Unloading Filament...
    UNLOAD_FILAMENT 

################################
####### FILAMENT_RUNOUT ########
################################
[gcode_macro FILAMENT_RUNOUT]
description: Procedure when Filament Runout Sensor is triggered
gcode:
    {% set smart_m600cfg = printer["gcode_macro _smart_m600cfg"] %}
    {% set notifycfg = printer["gcode_macro _notifycfg"] %} ; get notifycfg variables
    {% if smart_m600cfg.coldstart == False %}
        SET_GCODE_VARIABLE MACRO=_smart_m600cfg VARIABLE=prev_temp VALUE={printer.extruder.target}
        SET_GCODE_VARIABLE MACRO=_smart_m600cfg VARIABLE=runout VALUE=True
        M{notifycfg.output|int} Filament Runout
        {% if notifycfg.use_telegram == True %}
            {notifycfg.telegram_runout}
        {% endif %}
        SET_IDLE_TIMEOUT TIMEOUT=3600
        {% if notifycfg.audio_status == True %}
            {notify.m600_audio}
        {% endif %}
        M600
        {% if smart_m600cfg.auto_unload == True %}
            M{notifycfg.output|int} Unloading Filament
            UNLOAD_FILAMENT
        {% else %}
            {% if notifycfg.use_fluidd == True %}
                M118 Run UNLOAD_FILAMENT to unload.
                {% if notifycfg.audio_status == True and notifycfg.led_status > 0 %}
                    M118 Run ALERT_BEEP_OFF to silence beeper
                {% endif %}
            {% endif %}
        {% endif %}
        M109 S0
    {% endif %}

################################
############ M600 ##############
################################
[gcode_macro M600]
gcode:
    {% set smart_m600cfg = printer["gcode_macro _smart_m600cfg"] %}
    {% set notifycfg = printer["gcode_macro _notifycfg"] %} ; get notifycfg variables
    SET_IDLE_TIMEOUT TIMEOUT=7200 ; Increase idle timeout
    {% if printer.idle_timeout.state == "Printing" %}
        PAUSE ; Pause printing
    {% else %}
        CG28 ; Home all axes if not already homed
    {% endif %}
    {% if notifycfg.led_status == True %}
        {notifycfg.led_status_m600}
    {% endif %}
    _FILAMENT_PARK
    {% if notifycfg.audio_status == True %}
        {notifycfg.alert_on}
    {% endif %}
    # Check if this is slicer-initiated
    {% if smart_m600cfg.cold_start == False and smart_m600cfg.runout == False %}
        SET_IDLE_TIMEOUT TIMEOUT=3600
        M109 S0
        M{notifycfg.output|int} Filament Change
    {% endif %}
    # Reset check variable
    SET_GCODE_VARIABLE MACRO=_smart_m600cfg VARIABLE=runout VALUE=False

################################
####### UNLOAD_FILAMENT ########
################################
[gcode_macro UNLOAD_FILAMENT]
gcode:
    {% set smart_m600cfg = printer["gcode_macro _smart_m600cfg"] %}
    {% set notifycfg = printer["gcode_macro _notifycfg"] %} ; get notifycfg variables
    {% set LENGTH = params.LENGTH|default(smart_m600cfg.unload_length)|float %} ; Unload length
    {% set TARGET = params.TARGET|default(smart_m600cfg.default_temp)|float %} ; Unload temperature
    ##################
    {% if notifycfg.audio_status == True %}
        ALERT_BEEP_OFF
    {% endif %}
    {% set cur_temp = printer.extruder.temperature|float %} ; Current temperature
    {% set cur_targ = printer.extruder.target|int %}        ; Current target
    {% if printer.configfile.config.extruder.min_extrude_temp is defined %}
        {% set min_temp = printer.configfile.config.extruder.min_extrude_temp|int %}
    {% else %}
        {% set min_temp = 170 %}
    {% endif %}
    {% if smart_m600cfg.prev_temp != 0 %}
        {% set TARGET = smart_m600cfg.prev_temp %}
    {% elif params.TARGET is defined and params.TARGET|int > min_temp %} ; If current temp is below target
        {% set TARGET = params.TARGET|int|default(smart_m600cfg.default_temp) %}
    {% endif %}
    CG28 ; Home all axes if not already homed
    {% if cur_temp < (TARGET-5) %}
        {% if notifycfg.led_status == True %}
            {notifycfg.led_status_heat}
        {% endif %}
        M{notifycfg.output|int} Heating nozzle...
        M109 S{TARGET} ; Heat nozzle to target temperature
    {% endif %}
    {% if notifycfg.led_status == True %}
        {notifycfg.led_status_unload}
    {% endif %}
    G91 ; Relative positioning
    # Pre-unload to loosen filament
    G1 E5.0 F1200 ; Extrude a bit 
    G1 E3.0 F1600 ; Extrude a bit
    G1 E-13.14 F7000 ; pull hard
    # Unload
    G1 E-{LENGTH} F{smart_m600cfg.fast_speed|int}
    G90 ; Absolute postitioning
    M400
    {% if smart_m600cfg.auto_sensor == True %}
        ENABLEFILAMENTSENSOR
    {% endif %}
    M{notifycfg.output|int} Unload Complete.
    {% if notifycfg.led_status == True %}
        {notifycfg.led_status_busy}
    {% endif %}

################################
####### INSERT_FILAMENT ########
################################
[gcode_macro _INSERT_FILAMENT]
gcode:
    {% set smart_m600cfg = printer["gcode_macro _smart_m600cfg"] %}
    M{notifycfg.output|int} Filament Detected!
    {% if smart_m600cfg.auto_load == True %}
        LOAD_FILAMENT
    {% endif %}

################################
######## LOAD_FILAMENT #########
################################
[gcode_macro LOAD_FILAMENT]
gcode:
    {% set smart_m600cfg = printer["gcode_macro _smart_m600cfg"] %}
    {% set notifycfg = printer["gcode_macro _notifycfg"] %} ; get notifycfg variables
    {% set DELAY = params.DELAY|default(smart_m600cfg.load_delay)|int %}
    {% set SLOW = params.SLOW|default(smart_m600cfg.load_slow)|float %} ; Purge amount
    {% set FAST = params.FAST|default(smart_m600cfg.load_fast)|float %} ; Load length
    ##################
    {% set cur_temp = printer.extruder.temperature|float %} ; Current temperature
    {% set cur_targ = printer.extruder.target|int %}        ; Current target
    {% if printer.configfile.config.extruder.min_extrude_temp is defined %}
        {% set min_temp = printer.configfile.config.extruder.min_extrude_temp|int %}
    {% else %}
        {% set min_temp = 170 %}
    {% endif %}
    {% if smart_m600cfg.prev_temp != 0 %}
        {% set TARGET = smart_m600cfg.prev_temp %}
    {% elif params.TARGET is defined and params.TARGET|int > min_temp %} ; If current temp is below target
        {% set TARGET = params.TARGET|int|default(220) %}
    {% else %}
        {% set TARGET = 220 %}
    {% endif %}
    {% if printer.extruder.target < min_temp %} ; Verify extruder is hot enough
        {% set TARGET = smart_m600cfg.default_temp %} ; Heat up to default temp
    {% else %}
        {% set TARGET = printer.extruder.target %}
    {% endif %}
    CG28 ; Home all axes if not already homed
    {% if cur_temp < (TARGET-5) %}
        {% if notifycfg.led_status == True %}
            {notifycfg.led_status_heating}
        {% endif %}
        M{notifycfg.output|int} Heating nozzle...
        M109 S{TARGET} ; Heat nozzle to target temperature
    {% endif %}
    {% if notifycfg.led_status == True %}
    {notifycfg.led_status_load}
    {% endif %}
    {% if DELAY > 0 %}
        G4 P{DELAY*1000}
    {% endif %}
    M{notifycfg.output|int}  LOADING...
    G91 ; Relative positioning
    G1 E25.0 F{smart_m600cfg.med_speed|int} ; pre-load
    G1 E{FAST} F{smart_m600cfg.fast_speed|int} ; load up to hotend
    G4 P900 ; wait a moment
    G1 E{SLOW} F{smart_m600cfg.slow_speed|int} ; purge to change filament
    G1 E{smart_m600cfg.post_load_retraction|float}  F{smart_m600cfg.slow_speed|int} ; retract a little
    G90 ; Absolute postitioning
    M400
    {% if smart_m600cfg.coldstart == True %}
        M{notifycfg.output|int} Cooling nozzle...
        M109 S0
        SET_GCODE_VARIABLE MACRO=_smart_m600cfg VARIABLE=coldstart VALUE=False
        {% if smart_m600cfg.auto_sensor == True %}
            DISABLEFILAMENTSENSOR
        {% endif %}
    {% endif %}
    SET_GCODE_VARIABLE MACRO=_smart_m600cfg VARIABLE=prev_temp VALUE=0
    SET_IDLE_TIMEOUT TIMEOUT=900 ; Return idle timeout to normal
    {% if notifycfg.audio_status == True %}
        {notifycfg.m600_audio}
    {% endif %}
    M{notifycfg.output|int} Load Complete
    {% if notifycfg.led_status == True %}
        {notifycfg.led_status_ready}
    {% endif %}


################################
############ PURGE #############
################################
[gcode_macro PURGE]
gcode:
    {% set smart_m600cfg = printer["gcode_macro _smart_m600cfg"] %}
    {% set notifycfg = printer["gcode_macro _notifycfg"] %} ; get notifycfg variables
    {% set LENGTH = params.LENGTH|default(smart_m600cfg.purge_length)|float %} ; Purge length
    ##################
    {% set cur_temp = printer.extruder.temperature|float %} ; Current temperature
    {% set cur_targ = printer.extruder.target|int %}        ; Current target
    {% if printer.configfile.config.extruder.min_extrude_temp is defined %}
        {% set min_temp = printer.configfile.config.extruder.min_extrude_temp|int %}
    {% else %}
        {% set min_temp = 170 %}
    {% endif %}
    {% if smart_m600cfg.prev_temp != 0 %}
        {% set TARGET = smart_m600cfg.prev_temp %}
    {% elif params.TARGET is defined  %} ; If current temp is below target
        {% set TARGET = params.TARGET|int %}
    {% endif %}
    {% if printer.extruder.target < min_temp %} ; Verify extruder is hot enough
        {% set TARGET = smart_m600cfg.default_temp %} ; Heat up to default temp
    {% endif %}
    {% if notifycfg.led_status == True %}
        {notify.cfg.led_status_heat}
    {% endif %}
    M{notifycfg.output|int} Heating nozzle...
    M109 S{TARGET} ; Heat nozzle to target temperature
    {% if notifycfg.led_status == True %}
        {notifycfg.led_status_load}
    {% endif %}
    M{notifycfg.output|int} PURGING..
    G91 ; Relative positioning
    G1 E{LENGTH} F{smart_m600cfg.slow_speed|int} ; Purge filament
    G90 ; Absolute postitioning
    M400
    M109 S{cur_targ} ; Return target temp to previous value
    M{notifycfg.output|int} Purge Complete
    {% if notifycfg.led_status == True %}
        {notifycfg.led_status_ready}
    {% endif %}

################################
######## NOZZLE_CHANGE #########
################################
## This macro is used to change the nozzle on the printer
## It prepares the printhead by heating the nozzle to the
## apppropriate temperature and unloading the filament.
## Then the printhead is parked in a convenient position for nozzle changes.
[gcode_macro NOZZLE_CHANGE]
description: Prepare the printer for a nozzle change
gcode:
    {% set smart_m600cfg = printer["gcode_macro _smart_m600cfg"] %} ; get smart_m600cfg variables
    {% set notifycfg = printer["gcode_macro _notifycfg"] %} ; get notifycfg variables
    CG28 ; Home all axes if not already homed
    M{notifycfg.output|int} Nozzle Change
    MAINTENANCE ; Park the toolhead in a convenient position
    UNLOAD_FILAMENT ; Unload filament
    M{notifycfg.output|int} Change nozzle now and run NOZZLE_CHANGE_DONE when finished

[gcode_macro NOZZLE_CHANGE_DONE]
description: Complete the nozzle change
gcode:
    {% set smart_m600cfg = printer['gcode_macro _smart_m600cfg'] %} ; get smart_m600cfg variables
    {% set notifycfg = printer["gcode_macro _notifycfg"] %} ; get notifycfg variables
    LOAD_FILAMENT ; Load filament
    M104 S0 ; Turn off extruder heater
    M{notifycfg.output|int} Nozzle Change Complete

################################
########### PARKING ############
################################

# Used to park the toolhead for filament changes
[gcode_macro _FILAMENT_PARK]
gcode:
    {% set smart_m600cfg = printer["gcode_macro _smart_m600cfg"] %}
	M{notifycfg.output|int} Parking toolhead...
	SET_GCODE_VARIABLE MACRO=_smart_m600cfg VARIABLE=prev_temp VALUE={printer.extruder.target}
    G91
	{% if printer.toolhead.position.z|float + smart_m600cfg.z|float < printer.configfile.config["stepper_z"]["position_max"]|float %}
		{% if  printer.toolhead.position.z < smart_m600cfg.zmin|int %}
            G1 Z{smart_m600cfg.zmin|int-printer.toolhead.position.z|int}
		{% else %}
            SAVE_GCODE_STATE NAME=save_state
            G1 Z{smart_m600cfg.z|int}
            RESTORE_GCODE_STATE NAME=save_state
        {% endif %}
	{% endif%}
	G90
	G1 X{smart_m600cfg.x|int} Y{smart_m600cfg.y|int} F{smart_m600cfg.park_speed|int}