[gcode_macro SETUP_FILAMENT]
variable_parameter_NAME: None
variable_parameter_EXTRUDER: None
variable_parameter_BED: None
variable_parameter_OFFSET: None
gcode:
    {% set svv = printer.save_variables.variables %}
    # TODO: check that casting to string doesnt turn None into "None"
    {% set filament_name = (params.NAME | default(None) | string) %}
    {% if not filament_name %}
        {action_raise_error("A name is required for the filament. e.g. `SETUP_FILAMENT NAME=My Filament`")}
    {% endif %}
    # TODO: check that this works correctly for non numeric temperature values
    {% set extruder_temp = (params.EXTRUDER | default(None) | float) %}
    {% if not extruder_temp %}
        {action_raise_error("An extruder temperature is required for the filament. e.g. `SETUP_FILAMENT EXTRUDER=260`")}
    {% endif %}
    {% set bed_temp = (params.BED | default(None) | float) %}
    {% if not bed_temp %}
        {action_raise_error("A heater bed temperatire is required for the filament. e.g. `SETUP_FILAMENT BED=85`")}
    {% endif %}
	{% set offset = (params.OFFSET | default(0.00) | float) %}
    {% set filament_key = ("filaments_" ~ (filament_name | lower | replace(" ", "_"))) %}
    {% set filament = {"name": filament_name, "extruder": extruder_temp, "bed": bed_temp, "offset": offset} %}
    SAVE_VARIABLE VARIABLE="{filament_key}" VALUE="{filament | pprint}"
	
[gcode_macro _FILAMENTS_ASSERT_TOOL_INDEX_PARAM]
variable_parameter_TOOL_INDEX: None
gcode:
    {% set extruders = [] %}
    {% for name in printer %}
        {% if name.startswith("extruder") %}
            {% set _ignored = extruders.append(name) %}
        {% endif %}
    {% endfor %}
    {% set num_tools = (extruders | count) %}
    {% set tool_param = (params.TOOL_INDEX | default(None)) %}
    {% set has_tool_param = tool_param != None %}
    {% set tool_index = (tool_param | int) %}
    {% set is_valid_tool_index = True if (tool_index >= 0 and tool_index < num_tools) else False %}
    
    {% if num_tools == 0 %}
        {action_raise_error("Your printer has no extruders configured!")}
    {% elif num_tools == 1 and has_tool_param and not is_valid_tool_index %}
        {action_raise_error("Your printer only has 1 extruder/tool, you dont need to pass the TOOL_INDEX.")}
    {% elif num_tools > 1 and not has_tool_param %}
        {action_raise_error("Your printer has %i tools, you need to pass the TOOL_INDEX with a value between 0 and %i." % (num_tools, num_tools - 1))}
    {% elif num_tools > 1 and has_tool_param and not is_valid_tool_index %}
        {action_raise_error("TOOL_INDEX=%i is not a valid tool. Your printer has %i tools, you need to pass the TOOL_INDEX with a value between 0 and %i." % (tool_index, num_tools, num_tools - 1))}
    {% endif %}

[gcode_macro _FILAMENTS_ASSERT_FILAMENT_SET]
variable_parameter_TOOL_INDEX: None
gcode:
    {% set tool_index = (params.TOOL_INDEX | default(0) | int) %}
    {% set svv = printer.save_variables.variables %}
    {% set filament_key = svv.get("filament_installed_t" + (tool_index | string)) %}
    {% set filament = svv.get(filament_key) %}
    {% if filament_key == None or filament == None %}
        {% set extruders = [] %}
        {% for name in printer %}
            {% if name.startswith("extruder") %}
                {% set _ignored = extruders.append(name) %}
            {% endif %}
        {% endfor %}
        {% set num_tools = (extruders | count) %}
        {% if num_tools > 1 %}
            {action_raise_error("No filament is set for T%i. Did you forget to `SET_FILAMENT TOOL_INDEX=%i`?" % (tool_index, tool_index))}
        {% else %}
            {action_raise_error("No filament set. Use `SET_FILAMENT NAME=`.")}
        {% endif %}
    {% endif %}

# Assert that a valid existing filament is set on a tool and error out if not
[gcode_macro _FILAMENTS_ASSERT_TOOL_AND_FILAMENT_SET]
variable_parameter_TOOL_INDEX: None
gcode:
    _FILAMENTS_ASSERT_TOOL_INDEX_PARAM TOOL_INDEX={params.TOOL_INDEX}
    _FILAMENTS_ASSERT_FILAMENT_SET TOOL_INDEX={params.TOOL_INDEX}

## Macro to set the filament
[gcode_macro SET_FILAMENT]
description: Sets the filament that the printer is using
variable_parameter_NAME: None
variable_parameter_TOOL_INDEX: None
gcode:
    _FILAMENTS_ASSERT_TOOL_INDEX_PARAM TOOL_INDEX={params.TOOL_INDEX}
    _FILAMENTS_SET_FILAMENT NAME={params.NAME} TOOL_INDEX={params.TOOL_INDEX}

[gcode_macro _FILAMENTS_SET_FILAMENT]
description: Sets the filament that the printer is using
variable_parameter_NAME: None
variable_parameter_TOOL_INDEX: None
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set filament_name = (params.NAME | default(None)) %}
    {% if filament_name == None %}
        {action_raise_error("A name is required for the filament. e.g. `SET_FILAMENT NAME=My Filament`")}
    {% endif %}
    {% set filament_key = ("filaments_" + (filament_name | lower | replace(" ", "_"))) %}
    {% set filament = svv[filament_key] %}
    {% if filament == None %}
        {action_raise_error("No filament named '" + filament_name + "' could be found")}
    {% endif %}
    {% set tool_index = (params.TOOL_INDEX | default(0) | int) %}
    {% set filament_installed_key = "filament_installed_t" + (tool_index | string) %}
    SAVE_VARIABLE VARIABLE="{filament_installed_key}" VALUE="'{filament_key}'"

# Sets the current filament to None
# This can be very useful if you want warnings to pick a filament before loading a filament etc.
[gcode_macro UNSET_FILAMENT]
variable_parameter_TOOL: None
gcode:
    _FILAMENTS_ASSERT_TOOL_INDEX_PARAM TOOL_INDEX={params.TOOL_INDEX}
    _FILAMENTS_UNSET_FILAMENT TOOL_INDEX={params.TOOL_INDEX}

[gcode_macro _FILAMENTS_UNSET_FILAMENT]
variable_parameter_TOOL: None
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set tool_index = (params.TOOL_INDEX | default(0) | int) %}
    {% set filament_installed_key = "filament_installed_t" + (tool_index | string) %}
    SAVE_VARIABLE VARIABLE="{filament_installed_key}" VALUE="None"

# Show the installed filaments
[gcode_macro FILAMENT_STATUS]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set extruders = [] %}
    {% for name in printer %}
        {% if name.startswith("extruder") %}
            {% set _ = extruders.append(name) %}
        {% endif %}
    {% endfor %}
    {% set num_tools = (extruders | count) %}
    {% if num_tools == 0 %}
        {action_respond_info("No Extruders found in this printer!")}
    {% elif num_tools == 1 %}
        {% set filament_key = (svv["filament_installed_t0"] | default(None)) %}
        {% set filament = (None if filament_key == None else svv[filament_key]) %}
        # for mono-tool printers, dont show a tool number:
        {% if filament == None %}
            {action_respond_info("No Filament Set")}
        {% else %}
            {action_respond_info("Filament: %s - %.0fC/%.0fC" % (filament.name, filament.extruder, filament.bed, filament.offset))}
        {% endif %}
    {% else %}
        # for multi-tool printers display all tools in order:
        {% for tool_index in range(0, num_tools) %}
            {% set filament_key = (svv["filament_installed_t" + (tool_index | string)] | default(None)) %}
            {% set filament = (None if filament_key == None else (svv[filament_key] | default(None))) %}
            {% set extruder = "extruder" if tool_index == 0 else "extruder" + (tool_index | string)%}
            {% if filament == None %}
                {action_respond_info("T%i [%s]: None" % (tool_index, extruder))}
            {% else %}
                {action_respond_info("T%i [%s]: %s -  %.0fC/%.0fC" % (tool_index, extruder, filament.name, filament.extruder, filament.bed, filament.offset))}
            {% endif %}
        {% endfor %}
    {% endif %}

# list all the filaments in saved variables
[gcode_macro LIST_FILAMENTS]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% for key_name, filament in svv | dictsort %}
        {% if key_name.startswith("filaments_") %}
            {action_respond_info("%s: %.0f/%.0f" % (filament.name, filament.extruder, filament.bed, filament.offset))}
        {% endif %}
    {% endfor %}
